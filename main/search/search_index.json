{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>TODO</p>"},{"location":"#api-stability","title":"API stability","text":"<p> While <code>votingsys</code> is in development stage, no API is guaranteed to be stable from one release to the next. In fact, it is very likely that the API will change multiple times before a stable 1.0.0 release. In practice, this means that upgrading <code>votingsys</code> to a new version will possibly break any code that was using the old version of <code>votingsys</code>.</p>"},{"location":"#license","title":"License","text":"<p><code>votingsys</code> is licensed under BSD 3-Clause \"New\" or \"Revised\" license available in LICENSE file.</p>"},{"location":"refs/utils/","title":"Utils","text":""},{"location":"refs/utils/#votingsys.utils","title":"votingsys.utils","text":"<p>Contain utility functions.</p>"},{"location":"refs/vote/","title":"Vote","text":""},{"location":"refs/vote/#votingsys.vote","title":"votingsys.vote","text":"<p>Contain the vote implementations.</p>"},{"location":"refs/vote/#votingsys.vote.BaseVote","title":"votingsys.vote.BaseVote","text":"<p>               Bases: <code>ABC</code></p> <p>Define the base class to implement a vote.</p>"},{"location":"refs/vote/#votingsys.vote.BaseVote.equal","title":"votingsys.vote.BaseVote.equal  <code>abstractmethod</code>","text":"<pre><code>equal(other: Any, equal_nan: bool = False) -&gt; bool\n</code></pre> <p>Indicate if two vote objects are equal or not.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Any</code> <p>The other object to compare.</p> required <code>equal_nan</code> <code>bool</code> <p>Whether to compare NaN's as equal. If <code>True</code>, NaN's in both objects will be considered equal.</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the two votes are equal, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; from votingsys.vote import SingleMarkVote\n&gt;&gt;&gt; obj1 = SingleMarkVote(Counter({\"a\": 10, \"b\": 2, \"c\": 5, \"d\": 3}))\n&gt;&gt;&gt; obj2 = SingleMarkVote(Counter({\"a\": 10, \"b\": 2, \"c\": 5, \"d\": 3}))\n&gt;&gt;&gt; obj3 = SingleMarkVote(Counter({\"a\": 10, \"b\": 2}))\n&gt;&gt;&gt; obj1.equal(obj2)\nTrue\n&gt;&gt;&gt; obj1.equal(obj3)\nFalse\n</code></pre>"},{"location":"refs/vote/#votingsys.vote.BaseVote.get_num_candidates","title":"votingsys.vote.BaseVote.get_num_candidates  <code>abstractmethod</code>","text":"<pre><code>get_num_candidates() -&gt; int\n</code></pre> <p>Return the number of candidates.</p> <p>Returns:</p> Type Description <code>int</code> <p>The number of candidates.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; from votingsys.vote import SingleMarkVote\n&gt;&gt;&gt; vote = SingleMarkVote(Counter({\"a\": 10, \"b\": 2, \"c\": 5, \"d\": 3}))\n&gt;&gt;&gt; vote.get_num_candidates()\n4\n</code></pre>"},{"location":"refs/vote/#votingsys.vote.BaseVote.get_num_voters","title":"votingsys.vote.BaseVote.get_num_voters  <code>abstractmethod</code>","text":"<pre><code>get_num_voters() -&gt; int\n</code></pre> <p>Return the number of voters.</p> <p>Returns:</p> Type Description <code>int</code> <p>The number of voters.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; from votingsys.vote import SingleMarkVote\n&gt;&gt;&gt; vote = SingleMarkVote(Counter({\"a\": 10, \"b\": 2, \"c\": 5, \"d\": 3}))\n&gt;&gt;&gt; vote.get_num_voters()\n20\n</code></pre>"},{"location":"refs/vote/#votingsys.vote.MultipleWinnersFoundError","title":"votingsys.vote.MultipleWinnersFoundError","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when multiple winners are found instead of one.</p>"},{"location":"refs/vote/#votingsys.vote.SingleMarkVote","title":"votingsys.vote.SingleMarkVote","text":"<p>               Bases: <code>BaseVote</code></p> <p>Define a single-mark vote.</p> <p>This vote assumes that the voter must mark one and only one candidate.</p> <p>Parameters:</p> Name Type Description Default <code>counter</code> <code>Counter</code> <p>The counter with the number of votes for each candidate.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if at least one count is negative (&lt;0).</p> <code>ValueError</code> <p>if the counter is empty.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; from votingsys.vote import SingleMarkVote\n&gt;&gt;&gt; vote = SingleMarkVote(Counter({\"a\": 10, \"b\": 2, \"c\": 5, \"d\": 3}))\n&gt;&gt;&gt; vote\nSingleMarkVote(\n  (counter): Counter({'a': 10, 'c': 5, 'd': 3, 'b': 2})\n)\n</code></pre>"},{"location":"refs/vote/#votingsys.vote.SingleMarkVote.absolute_majority_winner","title":"votingsys.vote.SingleMarkVote.absolute_majority_winner","text":"<pre><code>absolute_majority_winner() -&gt; str\n</code></pre> <p>Compute the winner based on the absolute majority rule.</p> <p>The candidate receiving more than 50% of the vote is the winner.</p> <p>Returns:</p> Type Description <code>str</code> <p>The winner based on the absolute majority rule.</p> <p>Raises:</p> Type Description <code>WinnerNotFoundError</code> <p>if no candidate has the majority of votes.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; from votingsys.vote import SingleMarkVote\n&gt;&gt;&gt; vote = SingleMarkVote(Counter({\"a\": 10, \"b\": 20, \"c\": 5, \"d\": 3}))\n&gt;&gt;&gt; vote.absolute_majority_winner()\n'b'\n</code></pre>"},{"location":"refs/vote/#votingsys.vote.SingleMarkVote.from_sequence","title":"votingsys.vote.SingleMarkVote.from_sequence  <code>classmethod</code>","text":"<pre><code>from_sequence(votes: Sequence[str]) -&gt; SingleMarkVote\n</code></pre> <p>Instantiate a <code>SingleMarkVote</code> object from the sequence of votes.</p> <p>Parameters:</p> Name Type Description Default <code>votes</code> <code>Sequence[str]</code> <p>The sequence of votes.</p> required <p>Returns:</p> Type Description <code>SingleMarkVote</code> <p>The instantiated <code>SingleMarkVote</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from votingsys.vote import SingleMarkVote\n&gt;&gt;&gt; vote = SingleMarkVote.from_sequence([\"a\", \"b\", \"a\", \"c\", \"a\", \"a\", \"b\"])\n&gt;&gt;&gt; vote\nSingleMarkVote(\n  (counter): Counter({'a': 4, 'b': 2, 'c': 1})\n)\n</code></pre>"},{"location":"refs/vote/#votingsys.vote.SingleMarkVote.from_series","title":"votingsys.vote.SingleMarkVote.from_series  <code>classmethod</code>","text":"<pre><code>from_series(votes: Series) -&gt; SingleMarkVote\n</code></pre> <p>Instantiate a <code>SingleMarkVote</code> object from a <code>polars.Series</code> containing the votes.</p> <p>Parameters:</p> Name Type Description Default <code>votes</code> <code>Series</code> <p>The <code>polars.Series</code> containing the votes.</p> required <p>Returns:</p> Type Description <code>SingleMarkVote</code> <p>The instantiated <code>SingleMarkVote</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from votingsys.vote import SingleMarkVote\n&gt;&gt;&gt; vote = SingleMarkVote.from_sequence(pl.Series([\"a\", \"b\", \"a\", \"c\", \"a\", \"a\", \"b\"]))\n&gt;&gt;&gt; vote\nSingleMarkVote(\n  (counter): Counter({'a': 4, 'b': 2, 'c': 1})\n)\n</code></pre>"},{"location":"refs/vote/#votingsys.vote.SingleMarkVote.plurality_winner","title":"votingsys.vote.SingleMarkVote.plurality_winner","text":"<pre><code>plurality_winner() -&gt; str\n</code></pre> <p>Compute the winner based on the plurality rule.</p> <p>This rule is also named First-Past-The-Post (FPTP). The leading candidate, whether or not they have a majority of votes, is the winner.</p> <p>Returns:</p> Type Description <code>str</code> <p>The winner based on the plurality rule.</p> <p>Raises:</p> Type Description <code>MultipleWinnersFoundError</code> <p>if the leading candidates are tied.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; from votingsys.vote import SingleMarkVote\n&gt;&gt;&gt; vote = SingleMarkVote(Counter({\"a\": 10, \"b\": 2, \"c\": 5, \"d\": 3}))\n&gt;&gt;&gt; vote.plurality_winner()\n'a'\n</code></pre>"},{"location":"refs/vote/#votingsys.vote.SingleMarkVote.plurality_winners","title":"votingsys.vote.SingleMarkVote.plurality_winners","text":"<pre><code>plurality_winners() -&gt; tuple[str, ...]\n</code></pre> <p>Compute the winner based on the plurality rule.</p> <p>This rule is also named First-Past-The-Post (FPTP). The leading candidate, whether or not they have a majority of votes, is the winner.</p> <p>Returns:</p> Type Description <code>tuple[str, ...]</code> <p>The winners based on the plurality rule. Multiple winners can be returned if the leading candidates are tied.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; from votingsys.vote import SingleMarkVote\n&gt;&gt;&gt; vote = SingleMarkVote(Counter({\"a\": 10, \"b\": 2, \"c\": 5, \"d\": 3}))\n&gt;&gt;&gt; vote.plurality_winners()\n('a',)\n</code></pre>"},{"location":"refs/vote/#votingsys.vote.SingleMarkVote.super_majority_winner","title":"votingsys.vote.SingleMarkVote.super_majority_winner","text":"<pre><code>super_majority_winner(threshold: float) -&gt; str\n</code></pre> <p>Compute the winner based on the super majority rule.</p> <p>The candidate receiving more than X% of the vote is the winner, where <code>X &gt; 0.5</code>.</p> <p>Parameters:</p> Name Type Description Default <code>threshold</code> <code>float</code> <p>The minimal threshold to find the super majority winner.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The winner based on the super majority rule.</p> <p>Raises:</p> Type Description <code>WinnerNotFoundError</code> <p>if no candidate has the super majority of votes.</p> <code>ValueError</code> <p>if the threshold is not valid.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from collections import Counter\n&gt;&gt;&gt; from votingsys.vote import SingleMarkVote\n&gt;&gt;&gt; vote = SingleMarkVote(Counter({\"a\": 10, \"b\": 30, \"c\": 5, \"d\": 3}))\n&gt;&gt;&gt; vote.super_majority_winner(0.6)\n'b'\n</code></pre>"},{"location":"refs/vote/#votingsys.vote.WinnerNotFoundError","title":"votingsys.vote.WinnerNotFoundError","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when no winner can be found.</p>"}]}